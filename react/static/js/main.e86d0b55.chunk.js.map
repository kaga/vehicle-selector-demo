{"version":3,"sources":["components/filter-bar/FilterBar.tsx","services/vehicle-selector/queries/Fragments.tsx","services/vehicle-selector/queries/VehicleYears.tsx","components/common/SearchableList.tsx","components/vehicle-selector/GraphqlVehicleSelectorItem.tsx","components/vehicle-selector/items/VehicleYear.tsx","services/vehicle-selector/queries/VehicleMakes.tsx","components/vehicle-selector/items/VehicleMake.tsx","services/vehicle-selector/queries/VehicleModels.tsx","components/vehicle-selector/items/VehicleModel.tsx","App.tsx","reportWebVitals.ts","theme.ts","index.tsx"],"names":["FilterBar","props","useState","filters","initialState","reduce","results","filter","index","createInitialState","Array","forEach","element","elementIndex","previousItemState","updatedItemState","updateFilterItemState","initialFilterItemState","state","setState","useEffect","isEqual","updatedSelectorState","filterItemElements","map","filterItemState","Grid","item","xs","createElement","onSearchQueryUpdated","newQuery","previousState","update","searchQuery","$set","onSelectedOptionUpdated","selectedOption","updatedSelectedItemState","onOptionSelected","Container","maxWidth","Paper","container","direction","justify","spacing","FRAGEMENT_LEGACY_PAGINATION_CURSOR","FRAGMENT_UVDB_I18N","VEHICLE_SELECTOR_YEARS","gql","useStyles","makeStyles","theme","createStyles","root","padding","list","width","backgroundColor","palette","background","paper","overflow","maxHeight","minHeight","SearchableList","disabled","title","options","getOptionLabel","classes","items","option","ListItem","selected","id","button","onClick","_event","ListItemText","primary","firstOption","first","shouldUpdateSelectedOption","isUndefined","size","Box","className","TextField","value","label","margin","onChange","event","target","List","GraphqlVehicleSelectorItem","graphql","queryVariables","getQueryVariables","shouldSkip","data","useQuery","query","variables","skip","parseResponseBodies","VehicleYearFilterItem","undefined","React","YearSelector","filterBarState","updatedFilterItem","updatedItemIndex","indexOf","currentitemIndex","type","selectedMake","selectedModel","currentItemIndex","previousFilterItem","uvdb_make_id","uvdb_model_id","limit","uvdb","vehicle_selector","uvdb_years","getResponseItems","VEHICLE_SELECTOR_MAKES","VehicleMakeFilterItem","MakeSelector","selectedYear","uvdb_year_id","uvdb_makes","name","VEHICLE_SELECTOR_MODELS","VehicleModelFilterItem","ModelSelector","uvdb_models","App","client","ApolloClient","uri","cache","InMemoryCache","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createMuiTheme","main","secondary","error","red","A400","default","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.e86d0b55.chunk.js","sourcesContent":["import { Container, Paper, Grid } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport update from 'immutability-helper';\nimport { isEqual, reduce } from 'lodash';\nimport { FilterBarItemState, FilterItem } from './FilterItem';\n\n//TODO check output of 2021 SUZUKI\n//TODO inform the user selected a vehicle\n//TODO it is doing extra API ?\n\nexport function FilterBar(props: FilterBarProps) {\n  const [state, setState] = useState(initialFilterItemState(props.filters));\n\n  useEffect(() => {\n    props.filters.forEach((element, elementIndex) => {\n      const previousItemState = state[elementIndex];\n      const updatedItemState = element.updateFilterItemState(state, previousItemState);\n\n      if (updatedItemState && !isEqual(previousItemState, updatedItemState)) {\n        const updatedSelectorState = [...state];\n        updatedSelectorState[elementIndex] = updatedItemState;\n        setState(updatedSelectorState);\n      }\n    });\n  }, [props.filters, state]);\n\n  const filterItemElements = props.filters.map((element, index) => {\n    const filterItemState = state[index];\n    return (\n      <Grid item xs key={`filter-bar-item-grid-${index}`}>\n        {element.createElement({\n          ...filterItemState,\n          onSearchQueryUpdated: (newQuery: any) => onSearchQueryUpdated(setState, newQuery, index),\n          onSelectedOptionUpdated: (selectedOption: any) =>\n            onSelectedOptionUpdated(props, setState, selectedOption, index),\n        })}\n      </Grid>\n    );\n  });\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Paper>\n        <Grid container direction=\"row\" justify=\"center\" spacing={0}>\n          {filterItemElements}\n        </Grid>\n      </Paper>\n    </Container>\n  );\n}\n\nfunction initialFilterItemState(filters: FilterItem<any>[]) {\n  const initialState = reduce(\n    filters,\n    (results, filter, index) => {\n      results[index] = filter.createInitialState();\n      return results;\n    },\n    new Array<FilterBarItemState>(),\n  );\n  filters.forEach((element, elementIndex) => {\n    const previousItemState = initialState[elementIndex];\n    const updatedItemState = element.updateFilterItemState(initialState, previousItemState);\n    initialState[elementIndex] = updatedItemState;\n  });\n  return initialState;\n}\n\nfunction onSearchQueryUpdated(setState: SetFilterBarState, newQuery: any, index: number) {\n  setState((previousState) => {\n    const updatedSelectorState = [...previousState];\n    const previousItemState = previousState[index];\n    const updatedItemState = update(previousItemState, {\n      searchQuery: { $set: newQuery },\n    }) as FilterBarItemState;\n\n    updatedSelectorState[index] = updatedItemState;\n    return updatedSelectorState;\n  });\n}\n\nfunction onSelectedOptionUpdated(\n  props: FilterBarProps,\n  setState: SetFilterBarState,\n  selectedOption: any,\n  index: number,\n) {\n  setState((previousState) => {\n    const updatedSelectorState = [...previousState];\n    const previousItemState = previousState[index];\n    const updatedSelectedItemState = update(previousItemState, {\n      selectedOption: { $set: selectedOption },\n    }) as FilterBarItemState;\n\n    updatedSelectorState[index] = updatedSelectedItemState;\n\n    props.filters.forEach((element, elementIndex) => {\n      const previousItemState = previousState[elementIndex];\n      const updatedItemState = element.onOptionSelected(\n        updatedSelectorState,\n        updatedSelectedItemState,\n        previousItemState,\n      );\n\n      if (updatedItemState) {\n        updatedSelectorState[elementIndex] = updatedItemState;\n      }\n    });\n\n    return updatedSelectorState;\n  });\n}\n\nexport type FilterBarState = FilterBarItemState[];\n\ntype SetFilterBarState = React.Dispatch<React.SetStateAction<FilterBarState>>;\n\ntype FilterBarProps = {\n  filters: FilterItem<any>[];\n};\n","export const FRAGEMENT_LEGACY_PAGINATION_CURSOR = `\nfragment legacyPaginationCursor on LegacyPaginationCursor {\n    currentPage\n    perPage\n    total\n}\n`;\n\nexport const FRAGMENT_UVDB_I18N = `\nfragment uvdbI18n on UvdbI18n {\n    pl {\n        name\n    }\n    pt {\n        name\n    }\n    ro {\n        name\n    }\n}\n`;\n","import { gql } from '@apollo/client';\nimport { IdentifiableModel } from '../../IdentifiableModel';\nimport { FRAGEMENT_LEGACY_PAGINATION_CURSOR } from './Fragments';\n\nexport interface GraphqlVehicleYearsVariable {\n  uvdb_make_id?: number;\n  uvdb_model_id?: number;\n  limit?: number;\n  page?: number;\n}\n\nexport interface UvdbYear extends IdentifiableModel<number> {\n  id: number;\n}\n\nexport function getResponseItems(data: {\n  uvdb: {\n    vehicle_selector: {\n      uvdb_years: {\n        items: UvdbYear[];\n      };\n    };\n  };\n}) {\n  return data.uvdb.vehicle_selector.uvdb_years.items;\n}\n\nexport const VEHICLE_SELECTOR_YEARS = gql`\n  query VehicleSelectorYearOptions($uvdb_make_id: Int, $uvdb_model_id: Int, $limit: Int, $page: Int) {\n    uvdb {\n      vehicle_selector {\n        uvdb_years(uvdb_make_id: $uvdb_make_id, uvdb_model_id: $uvdb_model_id, limit: $limit, page: $page) {\n          items {\n            id\n          }\n          cursor {\n            ...legacyPaginationCursor\n          }\n        }\n      }\n    }\n  }\n  ${FRAGEMENT_LEGACY_PAGINATION_CURSOR}\n`;\n","import { makeStyles, Theme, createStyles, Box, List, ListItem, ListItemText, TextField } from '@material-ui/core';\nimport { first, isUndefined, size } from 'lodash';\nimport React, { useEffect } from 'react';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(1),\n    },\n    list: {\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n      overflow: 'auto',\n      maxHeight: 300,\n      minHeight: 300,\n    },\n  }),\n);\n\nexport function SearchableList<ListOptionType extends ListOption>({\n  disabled = false,\n  title,\n  searchQuery,\n  selectedOption,\n  options,\n  getOptionLabel,\n  onSearchQueryUpdated,\n  onSelectedOptionUpdated,\n}: SearchableListProps<ListOptionType>) {\n  const classes = useStyles();\n\n  const items = options?.map((option, index) => {\n    return (\n      <ListItem\n        key={`${title}-${index}-${option.id}`}\n        selected={option.id === selectedOption?.id}\n        button\n        disabled={disabled}\n        onClick={(_event) => onSelectedOptionUpdated?.(option)}\n      >\n        <ListItemText primary={getOptionLabel?.(option)} />\n      </ListItem>\n    );\n  });\n\n  const firstOption = first(options);\n  const shouldUpdateSelectedOption = isUndefined(selectedOption) && size(options) === 1 && firstOption;\n\n  useEffect(() => {\n    if (shouldUpdateSelectedOption && firstOption) {\n      onSelectedOptionUpdated?.(firstOption);\n    }\n  });\n\n  return (\n    <Box className={classes.root}>\n      <TextField\n        disabled={disabled}\n        value={searchQuery}\n        label={title}\n        margin=\"dense\"\n        onChange={(event) => onSearchQueryUpdated?.(event.target.value)}\n      ></TextField>\n      <List className={classes.list}>{items}</List>\n    </Box>\n  );\n}\n\nexport interface SearchableListProps<ListOptionType extends ListOption> {\n  disabled?: boolean;\n  title?: string;\n\n  searchQuery?: string;\n  onSearchQueryUpdated?: (query: string) => void;\n\n  selectedOption?: ListOptionType;\n  options?: ListOptionType[];\n  getOptionLabel?: (option: ListOptionType) => string;\n  onSelectedOptionUpdated?: (option: ListOptionType) => void;\n}\n\nexport interface ListOption {\n  id: number;\n}\n","import { useQuery } from '@apollo/client';\nimport { DocumentNode } from 'graphql';\nimport { isUndefined } from 'lodash';\nimport React from 'react';\nimport { ListOption, SearchableList, SearchableListProps } from '../common/SearchableList';\n\nexport function GraphqlVehicleSelectorItem<\n  T extends ListOption,\n  GraphqlQueryVariableType,\n  VehicleSelectorItemPropsType extends SearchableListProps<T>\n>({\n  title,\n  graphql,\n  getOptionLabel,\n}: GqlVehicleSelectorItemParameters<T, GraphqlQueryVariableType, VehicleSelectorItemPropsType>) {\n  return function Component(props: VehicleSelectorItemPropsType) {\n    const queryVariables = graphql.getQueryVariables(props);\n    const shouldSkip = props.disabled || isUndefined(queryVariables);\n\n    const { data } = useQuery(graphql.query, {\n      variables: queryVariables,\n      skip: shouldSkip,\n    });\n\n    const options = data ? graphql.parseResponseBodies(data) : [];\n\n    return (\n      <SearchableList\n        {...props}\n        title={title}\n        options={options}\n        getOptionLabel={getOptionLabel}\n      />\n    );\n  };\n}\n\ninterface GqlVehicleSelectorItemParameters<\n  T extends ListOption,\n  GraphqlQueryVariableType,\n  VehicleSelectorItemPropsType extends SearchableListProps<T>\n> {\n  title: string;\n  graphql: {\n    query: DocumentNode;\n    getQueryVariables: (props: VehicleSelectorItemPropsType) => GraphqlQueryVariableType | undefined;\n    parseResponseBodies: (response: any) => T[];\n  };\n  getOptionLabel: (option: T) => string;\n}\n","import { SearchableListProps } from '../../common/SearchableList';\nimport {\n  GraphqlVehicleYearsVariable,\n  getResponseItems,\n  VEHICLE_SELECTOR_YEARS,\n} from '../../../services/vehicle-selector/queries/VehicleYears';\nimport { VehicleMakeOption } from './VehicleMake';\nimport { VehicleModelOption } from './VehicleModel';\nimport update from 'immutability-helper';\nimport React from 'react';\nimport { FilterItem } from '../../filter-bar/FilterItem';\nimport { GraphqlVehicleSelectorItem } from '../GraphqlVehicleSelectorItem';\nimport { indexOf, isUndefined } from 'lodash';\n\nexport const VehicleYearFilterItem: FilterItem<VehicleYearFilterItemProps> = {\n  createInitialState: () => ({\n    searchQuery: '',\n    selectedOption: undefined,\n    disabled: false,\n  }),\n  createElement: (props) => React.createElement(YearSelector, props),\n  onOptionSelected: (filterBarState, updatedFilterItem, props) => {\n    const updatedItemIndex = indexOf(filterBarState, updatedFilterItem);\n    const currentitemIndex = indexOf(filterBarState, props);\n    const selectedOption = updatedFilterItem.selectedOption;\n\n    if (selectedOption && updatedItemIndex < currentitemIndex) {\n      switch (selectedOption.type) {\n        case 'MAKE':\n          return update(props, {\n            selectedMake: { $set: selectedOption as VehicleMakeOption },\n            selectedOption: { $set: undefined },\n          });\n        case 'MODEL':\n          return update(props, {\n            selectedModel: { $set: selectedOption as VehicleModelOption },\n            selectedOption: { $set: undefined },\n          });\n      }\n    }\n\n    return undefined;\n  },\n  updateFilterItemState: (filterBarState, props) => {\n    let disabled = false;\n    const currentItemIndex = indexOf(filterBarState, props);\n\n    if (currentItemIndex > 0) {\n      const previousFilterItem = filterBarState[currentItemIndex - 1];\n      disabled = disabled || isUndefined(previousFilterItem.selectedOption);\n    }\n\n    return update(props, {\n      disabled: { $set: disabled },\n    });\n  },\n};\n\nconst YearSelector = GraphqlVehicleSelectorItem<VehicleYearOption, GraphqlVehicleYearsVariable, VehicleYearFilterItemProps>(\n  {\n    title: 'Year',\n    graphql: {\n      query: VEHICLE_SELECTOR_YEARS,\n      getQueryVariables: (props) => ({\n        uvdb_make_id: props.selectedMake?.id,\n        uvdb_model_id: props.selectedModel?.id,\n        limit: 1000, //TODO implement pagination \n      }),\n      parseResponseBodies: (data) =>\n        getResponseItems(data).map((item) => ({\n          type: 'YEAR',\n          ...item,\n        })),\n    },\n    getOptionLabel: (option) => `${option.id}`,\n  },\n);\n\ninterface VehicleYearFilterItemProps extends SearchableListProps<VehicleYearOption> {\n  selectedMake?: VehicleMakeOption;\n  selectedModel?: VehicleModelOption;\n}\n\nexport type VehicleYearOption = {\n  type: 'YEAR';\n  id: number;\n};\n","import { gql } from '@apollo/client';\nimport { IdentifiableModel } from '../../IdentifiableModel';\nimport { FRAGEMENT_LEGACY_PAGINATION_CURSOR, FRAGMENT_UVDB_I18N } from './Fragments';\n\nexport interface GraphqlVehicleMakesVariable {\n  includeLocalization?: boolean;\n  uvdb_year_id?: number;\n  uvdb_year_min?: number;\n  uvdb_year_max?: number;\n  query?: string;\n  limit?: number;\n  page?: number;\n}\n\nexport interface UvdbMake extends IdentifiableModel<number> {\n  id: number;\n  name: string;\n}\n\nexport function getResponseItems(data: {\n  uvdb: {\n    vehicle_selector: {\n      uvdb_makes: {\n        items: UvdbMake[];\n      };\n    };\n  };\n}) {\n  return data.uvdb.vehicle_selector.uvdb_makes.items;\n}\n\nexport const VEHICLE_SELECTOR_MAKES = gql`\n  query VehicleSelectorMakeOptions(\n    $includeLocalization: Boolean = false\n    $uvdb_year_id: Int\n    $uvdb_year_min: Int\n    $uvdb_year_max: Int\n    $query: String\n    $limit: Int\n    $page: Int\n  ) {\n    uvdb {\n      vehicle_selector {\n        uvdb_makes(\n          uvdb_year_id: $uvdb_year_id\n          uvdb_year_min: $uvdb_year_min\n          uvdb_year_max: $uvdb_year_max\n          q: $query\n          limit: $limit\n          page: $page\n        ) {\n          items {\n            id\n            name\n            i18n @include(if: $includeLocalization) {\n              ...uvdbI18n\n            }\n          }\n          cursor {\n            ...legacyPaginationCursor\n          }\n        }\n      }\n    }\n  }\n  ${FRAGEMENT_LEGACY_PAGINATION_CURSOR}\n  ${FRAGMENT_UVDB_I18N}\n`;\n","import { SearchableListProps } from '../../common/SearchableList';\nimport {\n  GraphqlVehicleMakesVariable,\n  getResponseItems,\n  VEHICLE_SELECTOR_MAKES,\n} from '../../../services/vehicle-selector/queries/VehicleMakes';\nimport { VehicleYearOption } from './VehicleYear';\nimport update from 'immutability-helper';\nimport React from 'react';\nimport { FilterItem } from '../../filter-bar/FilterItem';\nimport { GraphqlVehicleSelectorItem } from '../GraphqlVehicleSelectorItem';\nimport { indexOf, isUndefined } from 'lodash';\n\nexport const VehicleMakeFilterItem: FilterItem<VehiceMakeFilterItemProps> = {\n  createInitialState: () => ({\n    searchQuery: '',\n    selectedOption: undefined,\n    disabled: false,\n  }),\n  createElement: (props) => React.createElement(MakeSelector, props),\n  onOptionSelected: (filterBarState, updatedFilterItem, props) => {\n    const updatedItemIndex = indexOf(filterBarState, updatedFilterItem);\n    const currentitemIndex = indexOf(filterBarState, props);\n    const selectedOption = updatedFilterItem.selectedOption;\n\n    if (selectedOption && updatedItemIndex < currentitemIndex) {\n      switch (selectedOption.type) {\n        case 'YEAR':\n          return update(props, {\n            selectedYear: { $set: selectedOption as VehicleYearOption },\n            selectedOption: { $set: undefined }\n          });\n      }\n    }\n\n    return undefined;\n  },\n  updateFilterItemState: (filterBarState, props) => {\n    let disabled = false;\n    const currentItemIndex = indexOf(filterBarState, props);\n\n    if (currentItemIndex > 0) {\n      const previousFilterItem = filterBarState[currentItemIndex - 1];\n      disabled = disabled || isUndefined(previousFilterItem.selectedOption);\n    }\n\n    return update(props, {\n      disabled: { $set: disabled },\n    });\n  },\n};\n\nconst MakeSelector = GraphqlVehicleSelectorItem<VehicleMakeOption, GraphqlVehicleMakesVariable, VehiceMakeFilterItemProps>({\n  title: 'Make',\n  graphql: {\n    query: VEHICLE_SELECTOR_MAKES,\n    getQueryVariables: (props) => ({\n      uvdb_year_id: props.selectedYear?.id,\n      query: props.searchQuery,\n    }),\n    parseResponseBodies: (data) =>\n      getResponseItems(data).map((item) => ({\n        type: 'MAKE',\n        ...item,\n      })),\n  },\n  getOptionLabel: (option) => option.name,\n});\n\ninterface VehiceMakeFilterItemProps extends SearchableListProps<VehicleMakeOption> {\n  selectedYear?: VehicleYearOption;\n}\n\nexport type VehicleMakeOption = {\n  type: 'MAKE';\n  id: number;\n  name: string;\n};\n","import { gql } from '@apollo/client';\nimport { IdentifiableModel } from '../../IdentifiableModel';\nimport { FRAGEMENT_LEGACY_PAGINATION_CURSOR, FRAGMENT_UVDB_I18N } from './Fragments';\n\nexport interface GraphqlVehicleModelsVariable {\n  includeLocalization?: number;\n  uvdb_make_id: number;\n  uvdb_year_id?: number;\n  uvdb_year_min?: number;\n  uvdb_year_max?: number;\n  query?: string;\n  limit?: number;\n  page?: number;\n}\n\nexport interface UvdbModel extends IdentifiableModel<number> {\n  id: number;\n  name: string;\n}\n\nexport function getResponseItems(data: {\n  uvdb: {\n    vehicle_selector: {\n      uvdb_models: {\n        items: UvdbModel[];\n      };\n    };\n  };\n}) {\n  return data.uvdb.vehicle_selector.uvdb_models.items;\n}\n\nexport const VEHICLE_SELECTOR_MODELS = gql`\n  query VehicleSelectorModelOptions(\n    $includeLocalization: Boolean = false\n    $uvdb_make_id: Int!\n    $uvdb_year_id: Int\n    $uvdb_year_min: Int\n    $uvdb_year_max: Int\n    $query: String\n    $limit: Int\n    $page: Int\n  ) {\n    uvdb {\n      vehicle_selector {\n        uvdb_models(\n          uvdb_make_id: $uvdb_make_id\n          uvdb_year_id: $uvdb_year_id\n          uvdb_year_min: $uvdb_year_min\n          uvdb_year_max: $uvdb_year_max\n          q: $query\n          limit: $limit\n          page: $page\n        ) {\n          items {\n            id\n            name\n            i18n @include(if: $includeLocalization) {\n              ...uvdbI18n\n            }\n          }\n          cursor {\n            ...legacyPaginationCursor\n          }\n        }\n      }\n    }\n  }\n  ${FRAGEMENT_LEGACY_PAGINATION_CURSOR}\n  ${FRAGMENT_UVDB_I18N}\n`;\n","import { getResponseItems } from '../../../services/vehicle-selector/queries/VehicleModels';\nimport {\n  GraphqlVehicleModelsVariable,\n  VEHICLE_SELECTOR_MODELS,\n} from '../../../services/vehicle-selector/queries/VehicleModels';\n\nimport { SearchableListProps } from '../../common/SearchableList';\nimport { VehicleMakeOption } from './VehicleMake';\nimport { VehicleYearOption } from './VehicleYear';\nimport update from 'immutability-helper';\nimport React from 'react';\nimport { FilterItem } from '../../filter-bar/FilterItem';\nimport { GraphqlVehicleSelectorItem } from '../GraphqlVehicleSelectorItem';\nimport { indexOf, isUndefined } from 'lodash';\n\nexport const VehicleModelFilterItem: FilterItem<VehicleModelFilterItemProps> = {\n  createInitialState: () => ({\n    searchQuery: '',\n    selectedOption: undefined,\n    disabled: false,\n  }),\n  createElement: (props) => React.createElement(ModelSelector, props),\n  onOptionSelected: (filterBarState, updatedFilterItem, props) => {\n    const updatedItemIndex = indexOf(filterBarState, updatedFilterItem);\n    const currentitemIndex = indexOf(filterBarState, props);\n    const selectedOption = updatedFilterItem.selectedOption;\n\n    if (selectedOption && updatedItemIndex < currentitemIndex) {\n      switch (selectedOption.type) {\n        case 'MAKE':\n          return update(props, {\n            selectedMake: { $set: selectedOption as VehicleMakeOption },\n            selectedOption: { $set: undefined }\n          });\n        case 'YEAR':\n          return update(props, {\n            selectedYear: { $set: selectedOption as VehicleYearOption },\n            selectedOption: { $set: undefined }\n          });\n      }\n    }\n\n    return undefined;\n  },\n  updateFilterItemState: (filterBarState, props) => {\n    let disabled = isUndefined(props.selectedMake);\n    const currentItemIndex = indexOf(filterBarState, props);\n\n    if (currentItemIndex > 0) {\n      const previousFilterItem = filterBarState[currentItemIndex - 1];\n      disabled = disabled || isUndefined(previousFilterItem.selectedOption);\n    }\n\n    return update(props, {\n      disabled: { $set: disabled },\n    });\n  },\n};\n\nconst ModelSelector = GraphqlVehicleSelectorItem<\n  VehicleModelOption,\n  GraphqlVehicleModelsVariable,\n  VehicleModelFilterItemProps\n>({\n  title: 'Model',\n  graphql: {\n    query: VEHICLE_SELECTOR_MODELS,\n    getQueryVariables: ({ selectedMake, selectedYear, searchQuery }) => {\n      if (selectedMake) {\n        return {\n          uvdb_year_id: selectedYear?.id,\n          uvdb_make_id: selectedMake.id,\n          query: searchQuery\n        };\n      }\n      return undefined;\n    },\n    parseResponseBodies: (data) =>\n      getResponseItems(data).map((item) => ({\n        type: 'MODEL',\n        ...item,\n      })),\n  },\n  getOptionLabel: (option) => option.name,\n});\n\ninterface VehicleModelFilterItemProps extends SearchableListProps<VehicleModelOption> {\n  selectedYear?: VehicleYearOption;\n  selectedMake?: VehicleMakeOption;\n}\n\nexport type VehicleModelOption = {\n  type: 'MODEL';\n  id: number;\n  name: string;\n};\n","import React from 'react';\nimport './App.css';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport { Grid } from '@material-ui/core';\nimport { FilterBar } from './components/filter-bar/FilterBar';\nimport { VehicleYearFilterItem } from './components/vehicle-selector/items/VehicleYear';\nimport { VehicleMakeFilterItem } from './components/vehicle-selector/items/VehicleMake';\nimport { VehicleModelFilterItem } from './components/vehicle-selector/items/VehicleModel';\n\nfunction App() {\n  const client = new ApolloClient({\n    uri: 'https://api.parts-pal.com/node-api/graphql',\n    cache: new InMemoryCache(),\n  });\n\n  return (\n    <React.Fragment>\n      <ApolloProvider client={client}>\n        <Grid container spacing={1} direction=\"column\" justify=\"center\">\n          <Grid item>\n            <FilterBar\n              filters={[VehicleYearFilterItem, VehicleMakeFilterItem, VehicleModelFilterItem]}\n            ></FilterBar>\n          </Grid>\n\n          <Grid item>\n            <FilterBar\n              filters={[VehicleMakeFilterItem, VehicleModelFilterItem, VehicleYearFilterItem]}\n            ></FilterBar>\n          </Grid>\n        </Grid>\n      </ApolloProvider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\nimport { CssBaseline } from '@material-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}