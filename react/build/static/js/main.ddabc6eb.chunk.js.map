{"version":3,"sources":["components/filter-bar/FilterBar.tsx","services/vehicle-selector/Client.tsx","services/vehicle-selector/queries/Fragments.tsx","services/vehicle-selector/queries/VehicleYears.tsx","components/common/SearchableList.tsx","components/vehicle-selector/GraphqlVehicleSelectorItem.tsx","components/vehicle-selector/items/VehicleYear.tsx","services/vehicle-selector/queries/VehicleMakes.tsx","components/vehicle-selector/items/VehicleMake.tsx","services/vehicle-selector/queries/VehicleModels.tsx","components/vehicle-selector/items/VehicleModel.tsx","App.tsx","reportWebVitals.ts","theme.ts","index.tsx"],"names":["FilterBar","props","useState","filters","initialState","reduce","results","filter","push","createInitialState","Array","forEach","element","elementIndex","previousItemState","updatedItemState","updateFilterItemState","initialFilterItemState","state","setState","allSelectedOptions","map","filterItemState","selectedOption","useEffect","updatedState","undefined","isEqual","updateFilterItemsState","every","isObject","onSelectedAllFilterItems","Container","maxWidth","Paper","Grid","container","direction","justify","spacing","index","item","xs","createElement","onStateUpdated","newFilterItemState","previousState","updatedSelectedItemState","result","onFilterItemUpdated","onFilterItemStateUpdated","VehicleSelectorClient","query","parseResponse","variables","shouldSkip","data","useQuery","skip","response","unionById","items","unionBy","FRAGMENT_LEGACY_PAGINATION_CURSOR","FRAGMENT_UVDB_I18N","useVehicleYearsSelector","gql","uvdb","vehicle_selector","uvdb_years","useStyles","makeStyles","theme","createStyles","root","padding","list","width","backgroundColor","palette","background","paper","overflow","maxHeight","minHeight","textfield","SearchableList","disabled","title","searchQuery","options","getOptionLabel","onSearchQueryUpdated","onSelectedOptionUpdated","classes","option","ListItem","selected","id","button","onClick","_event","ListItemText","primary","firstOption","first","shouldUpdateSelectedOption","isUndefined","size","Box","className","TextField","value","label","margin","onChange","event","target","List","GraphqlVehicleSelectorItem","useClient","optionLabel","update","$set","VehicleYearFilterItem","React","YearSelector","filterBarState","updatedFilterItem","updatedItemIndex","indexOf","currentItemIndex","type","selectedMake","selectedModel","previousFilterItem","uvdb_make_id","uvdb_model_id","limit","toString","startsWith","useVehicleMakesSelector","uvdb_makes","VehicleMakeFilterItem","MakeSelector","selectedYear","uvdb_year_id","name","useVehicleModelsSelector","uvdb_models","VehicleModelFilterItem","ModelSelector","queryVariable","App","client","ApolloClient","uri","cache","InMemoryCache","onSelectFilterOptions","selectedOptions","console","log","JSON","stringify","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createMuiTheme","main","secondary","error","red","A400","default","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.ddabc6eb.chunk.js","sourcesContent":["import { Container, Paper, Grid } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { every, isEqual, isObject, reduce } from 'lodash';\nimport { FilterBarItemState, FilterItem } from './FilterItem';\n\n//TODO it is doing extra API ?\nexport function FilterBar(props: FilterBarProps) {\n  const [state, setState] = useState(initialFilterItemState(props.filters));\n  const allSelectedOptions = state.map((filterItemState) => filterItemState.selectedOption);\n\n  useEffect(() => {\n    const updatedState = updateFilterItemsState(props, state);\n    if (updatedState) {\n      setState(updatedState);\n    }\n  }, [props, state]);\n\n  useEffect(() => {\n    if (every(allSelectedOptions, isObject)) {\n      props.onSelectedAllFilterItems(allSelectedOptions);\n    }\n  }, [props, allSelectedOptions]);\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Paper>\n        <Grid container direction=\"row\" justify=\"center\" spacing={0}>\n          {props.filters.map((element, index) => {\n            const filterItemState = state[index];\n            return (\n              <Grid item xs key={`filter-bar-item-grid-${index}`}>\n                {element.createElement({\n                  state: {\n                    ...filterItemState,\n                  },\n                  onStateUpdated: (newFilterItemState) => {\n                    setState((previousState) => {\n                      const updatedState = [...previousState];\n                      updatedState[index] = newFilterItemState;\n                      return onFilterItemStateUpdated(props, updatedState, newFilterItemState);\n                    });\n                  },\n                })}\n              </Grid>\n            );\n          })}\n        </Grid>\n      </Paper>\n    </Container>\n  );\n}\n\nfunction initialFilterItemState(filters: FilterItem<any>[]) {\n  const initialState = reduce(\n    filters,\n    (results, filter) => {\n      results.push(filter.createInitialState());\n      return results;\n    },\n    new Array<FilterBarItemState>(),\n  );\n\n  filters.forEach((element, elementIndex) => {\n    const previousItemState = initialState[elementIndex];\n    const updatedItemState = element.updateFilterItemState(initialState, previousItemState);\n    initialState[elementIndex] = updatedItemState;\n  });\n  return initialState;\n}\n\nfunction updateFilterItemsState(props: FilterBarProps, state: FilterBarState) {\n  let updatedState: FilterBarState | undefined = undefined;\n  props.filters.forEach((element, elementIndex) => {\n    const previousItemState = state[elementIndex];\n    const updatedItemState = element.updateFilterItemState(state, previousItemState);\n\n    if (updatedItemState && !isEqual(previousItemState, updatedItemState)) {\n      if (!updatedState) {\n        updatedState = [...state];\n      }\n      updatedState[elementIndex] = updatedItemState;\n    }\n  });\n  return updatedState;\n}\n\nfunction onFilterItemStateUpdated(\n  props: FilterBarProps,\n  previousState: FilterBarState,\n  updatedSelectedItemState: FilterBarItemState,\n) {\n  return reduce(\n    props.filters,\n    (result, element, elementIndex) => {\n      const previousItemState = previousState[elementIndex];\n      const updatedItemState = element.onFilterItemUpdated(result, updatedSelectedItemState, previousItemState);\n\n      if (updatedItemState) {\n        result[elementIndex] = updatedItemState;\n      }\n      return result;\n    },\n    previousState,\n  );\n}\n\nexport type FilterBarState = FilterBarItemState[];\n\ntype FilterBarProps = {\n  filters: FilterItem<FilterBarItemState>[];\n  onSelectedAllFilterItems: (selectedOption: any[]) => void;\n};\n","import { useQuery } from '@apollo/client';\nimport { DocumentNode } from 'graphql';\nimport { unionBy } from 'lodash';\nimport { IdentifiableModel } from '../IdentifiableModel';\n\nexport function VehicleSelectorClient<GraphqlQueryVariableType, ResponseType>({\n  query,\n  parseResponse,\n}: {\n  query: DocumentNode;\n  parseResponse: (response: any) => ResponseType;\n}) {\n  return function _VehicleSelectorClient({ variables, shouldSkip = false }: VehicleSelectorQuery<GraphqlQueryVariableType>) {\n    const { data } = useQuery(query, {\n      variables: variables,\n      skip: shouldSkip,\n    });\n\n    let response: ResponseType | undefined = undefined;\n    if (data) {\n      response = parseResponse(data);\n    }\n\n    return { data: response };\n  };\n}\n\nexport interface VehicleSelectorQuery<GraphqlQueryVariableType> {\n  shouldSkip: boolean;\n  variables: GraphqlQueryVariableType;\n}\n\nexport function unionById<T extends IdentifiableModel<any>>(items: T[]) {\n    return unionBy(items, 'id');\n} ","export const FRAGMENT_LEGACY_PAGINATION_CURSOR = `\nfragment legacyPaginationCursor on LegacyPaginationCursor {\n    currentPage\n    perPage\n    total\n}\n`;\n\nexport const FRAGMENT_UVDB_I18N = `\nfragment uvdbI18n on UvdbI18n {\n    pl {\n        name\n    }\n    pt {\n        name\n    }\n    ro {\n        name\n    }\n}\n`;\n","import { gql } from '@apollo/client';\nimport { IdentifiableModel } from '../../IdentifiableModel';\nimport { unionById, VehicleSelectorClient } from '../Client';\nimport { FRAGMENT_LEGACY_PAGINATION_CURSOR } from './Fragments';\n\nexport interface GraphqlVehicleYearsVariable {\n  uvdb_make_id?: number;\n  uvdb_model_id?: number;\n  limit?: number;\n  page?: number;\n}\n\nexport interface UvdbYear extends IdentifiableModel<number> {\n  id: number;\n}\n\nexport const VEHICLE_SELECTOR_YEARS = gql`\n  query VehicleSelectorYearOptions($uvdb_make_id: Int, $uvdb_model_id: Int, $limit: Int, $page: Int) {\n    uvdb {\n      vehicle_selector {\n        uvdb_years(uvdb_make_id: $uvdb_make_id, uvdb_model_id: $uvdb_model_id, limit: $limit, page: $page) {\n          items {\n            id\n          }\n          cursor {\n            ...legacyPaginationCursor\n          }\n        }\n      }\n    }\n  }\n  ${FRAGMENT_LEGACY_PAGINATION_CURSOR}\n`;\n\ntype ResponseBody = {\n  uvdb: {\n    vehicle_selector: {\n      uvdb_years: {\n        items: UvdbYear[];\n      };\n    };\n  };\n};\n\nexport const useVehicleYearsSelector = VehicleSelectorClient<GraphqlVehicleYearsVariable | undefined, UvdbYear[]>({\n  query: VEHICLE_SELECTOR_YEARS,\n  parseResponse: (data: ResponseBody) => {\n    const items = data.uvdb.vehicle_selector.uvdb_years.items;\n    return unionById(items);\n  },\n});\n","import { makeStyles, Theme, createStyles, Box, List, ListItem, ListItemText, TextField } from '@material-ui/core';\nimport { first, isUndefined, size } from 'lodash';\nimport React, { useEffect } from 'react';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(1),\n    },\n    list: {\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n      overflow: 'auto',\n      maxHeight: 300,\n      minHeight: 300,\n    },\n    textfield: {\n      width: '100%',\n    }\n  }),\n);\n\nexport function SearchableList<ListOptionType extends ListOption>({\n  disabled = false,\n  title,\n  searchQuery,\n  selectedOption,\n  options,\n  getOptionLabel,\n  onSearchQueryUpdated,\n  onSelectedOptionUpdated,\n}: SearchableListProps<ListOptionType>) {\n  const classes = useStyles();\n\n  const items = options?.map((option, index) => {\n    return (\n      <ListItem\n        key={`${title}-${index}-${option.id}`}\n        selected={option.id === selectedOption?.id}\n        button\n        disabled={disabled}\n        onClick={(_event) => onSelectedOptionUpdated?.(option)}\n      >\n        <ListItemText primary={getOptionLabel?.(option)} />\n      </ListItem>\n    );\n  });\n\n  const firstOption = first(options);\n  const shouldUpdateSelectedOption = isUndefined(selectedOption) && size(options) === 1 && firstOption;\n\n  useEffect(() => {\n    if (shouldUpdateSelectedOption && firstOption) {\n      onSelectedOptionUpdated?.(firstOption);\n    }\n  });\n\n  return (\n    <Box className={classes.root}>\n      <TextField\n        className={classes.textfield}\n        disabled={disabled}\n        value={searchQuery}\n        label={title}\n        margin=\"dense\"\n        onChange={(event) => onSearchQueryUpdated?.(event.target.value)}\n      ></TextField>\n      <List className={classes.list}>{items}</List>\n    </Box>\n  );\n}\n\nexport interface SearchableListProps<ListOptionType extends ListOption> {\n  disabled?: boolean;\n  title?: string;\n\n  searchQuery?: string;\n  onSearchQueryUpdated?: (query: string) => void;\n\n  selectedOption?: ListOptionType;\n  options?: ListOptionType[];\n  getOptionLabel?: (option: ListOptionType) => string;\n  onSelectedOptionUpdated?: (option: ListOptionType) => void;\n}\n\nexport interface ListOption {\n  id: number;\n}\n","import React from 'react';\nimport { ListOption, SearchableList, SearchableListProps } from '../common/SearchableList';\nimport { FilterBarItemProps, FilterBarItemState } from '../filter-bar/FilterItem';\nimport update from 'immutability-helper';\n\nexport function GraphqlVehicleSelectorItem<\n  T extends ListOption & OptionLabel,\n  VehicleSelectorItemPropsType extends FilterBarItemState & SearchableListProps<T>\n>({\n  title,\n  useClient,\n}: {\n  title: string;\n  useClient: (props: VehicleSelectorItemPropsType) => { data: T[] | undefined };\n}) {\n  return function Component(props: FilterBarItemProps<VehicleSelectorItemPropsType>) {\n    const { data } = useClient(props.state);\n    const state = props.state\n    return (\n      <SearchableList\n        {...state}\n        title={title}\n        options={data}\n        getOptionLabel={(item) => item.optionLabel}\n        onSearchQueryUpdated={(searchQuery) => {\n          const updatedItemState = update(state as FilterBarItemState, {\n            searchQuery: { $set: searchQuery },\n          });\n          props.onStateUpdated(updatedItemState as any);\n        }}\n        onSelectedOptionUpdated={(selectedOption) => {\n          const updatedItemState = update(state as SearchableListProps<T>, {\n            selectedOption: { $set: selectedOption },\n          }) as FilterBarItemState;\n          props.onStateUpdated(updatedItemState as any);\n        }}\n      />\n    );\n  };\n}\n\ninterface OptionLabel {\n  optionLabel: String;\n}\n","import { SearchableListProps } from '../../common/SearchableList';\nimport { useVehicleYearsSelector } from '../../../services/vehicle-selector/queries/VehicleYears';\nimport { VehicleMakeOption } from './VehicleMake';\nimport { VehicleModelOption } from './VehicleModel';\nimport update from 'immutability-helper';\nimport React from 'react';\nimport { FilterItem } from '../../filter-bar/FilterItem';\nimport { GraphqlVehicleSelectorItem } from '../GraphqlVehicleSelectorItem';\nimport { indexOf, isUndefined } from 'lodash';\n\nexport const VehicleYearFilterItem: FilterItem<VehicleYearFilterItemProps> = {\n  createInitialState: () => ({\n    searchQuery: '',\n    selectedOption: undefined,\n    disabled: false,\n  }),\n  createElement: (props) => React.createElement(YearSelector, props),\n  onFilterItemUpdated: (filterBarState, updatedFilterItem, props) => {\n    const updatedItemIndex = indexOf(filterBarState, updatedFilterItem);\n    const currentItemIndex = indexOf(filterBarState, props);\n    const selectedOption = updatedFilterItem.selectedOption;\n\n    if (selectedOption && updatedItemIndex < currentItemIndex) {\n      switch (selectedOption.type) {\n        case 'MAKE':\n          return update(props, {\n            selectedMake: { $set: selectedOption as VehicleMakeOption },\n            selectedOption: { $set: undefined },\n          });\n        case 'MODEL':\n          return update(props, {\n            selectedModel: { $set: selectedOption as VehicleModelOption },\n            selectedOption: { $set: undefined },\n          });\n      }\n    }\n\n    return undefined;\n  },\n  updateFilterItemState: (filterBarState, props) => {\n    let disabled = false;\n    const currentItemIndex = indexOf(filterBarState, props);\n\n    if (currentItemIndex > 0) {\n      const previousFilterItem = filterBarState[currentItemIndex - 1];\n      disabled = disabled || isUndefined(previousFilterItem.selectedOption);\n    }\n\n    return update(props, {\n      disabled: { $set: disabled },\n    });\n  },\n};\n\nconst YearSelector = GraphqlVehicleSelectorItem<VehicleYearOption, VehicleYearFilterItemProps>({\n  title: 'Year',\n  useClient: (props) => {\n    const { data } = useVehicleYearsSelector({\n      shouldSkip: props.disabled || false,\n      variables: {\n        uvdb_make_id: props.selectedMake?.id,\n        uvdb_model_id: props.selectedModel?.id,\n        limit: 1000, //TODO implement pagination\n      },\n    });\n    if (data) {\n      return {\n        data: data\n          .filter((item) => {\n            const searchQuery = props.searchQuery;\n            return !searchQuery || item.id.toString().startsWith(searchQuery);\n          })\n          .map((item) => ({\n            type: 'YEAR',\n            optionLabel: `${item.id}`,\n            ...item,\n          })),\n      };\n    }\n    return {\n      data: undefined,\n    };\n  },\n});\n\ninterface VehicleYearFilterItemProps extends SearchableListProps<VehicleYearOption> {\n  selectedMake?: VehicleMakeOption;\n  selectedModel?: VehicleModelOption;\n}\n\nexport type VehicleYearOption = {\n  type: 'YEAR';\n  id: number;\n  optionLabel: String;\n};\n","import { gql } from '@apollo/client';\nimport { IdentifiableModel } from '../../IdentifiableModel';\nimport { VehicleSelectorClient, unionById } from '../Client';\nimport { FRAGMENT_LEGACY_PAGINATION_CURSOR, FRAGMENT_UVDB_I18N } from './Fragments';\n\nexport interface GraphqlVehicleMakesVariable {\n  includeLocalization?: boolean;\n  uvdb_year_id?: number;\n  uvdb_year_min?: number;\n  uvdb_year_max?: number;\n  query?: string;\n  limit?: number;\n  page?: number;\n}\n\nexport interface UvdbMake extends IdentifiableModel<number> {\n  id: number;\n  name: string;\n}\n\nexport const VEHICLE_SELECTOR_MAKES = gql`\n  query VehicleSelectorMakeOptions(\n    $includeLocalization: Boolean = false\n    $uvdb_year_id: Int\n    $uvdb_year_min: Int\n    $uvdb_year_max: Int\n    $query: String\n    $limit: Int\n    $page: Int\n  ) {\n    uvdb {\n      vehicle_selector {\n        uvdb_makes(\n          uvdb_year_id: $uvdb_year_id\n          uvdb_year_min: $uvdb_year_min\n          uvdb_year_max: $uvdb_year_max\n          q: $query\n          limit: $limit\n          page: $page\n        ) {\n          items {\n            id\n            name\n            i18n @include(if: $includeLocalization) {\n              ...uvdbI18n\n            }\n          }\n          cursor {\n            ...legacyPaginationCursor\n          }\n        }\n      }\n    }\n  }\n  ${FRAGMENT_LEGACY_PAGINATION_CURSOR}\n  ${FRAGMENT_UVDB_I18N}\n`;\n\ntype ResponseBody = {\n  uvdb: {\n    vehicle_selector: {\n      uvdb_makes: {\n        items: UvdbMake[];\n      };\n    };\n  };\n};\n\nexport const useVehicleMakesSelector = VehicleSelectorClient<GraphqlVehicleMakesVariable | undefined, UvdbMake[]>({\n  query: VEHICLE_SELECTOR_MAKES,\n  parseResponse: (data: ResponseBody) => {\n    const items = data.uvdb.vehicle_selector.uvdb_makes.items;\n    return unionById(items);\n  },\n});","import { SearchableListProps } from '../../common/SearchableList';\nimport { useVehicleMakesSelector } from '../../../services/vehicle-selector/queries/VehicleMakes';\nimport { VehicleYearOption } from './VehicleYear';\nimport update from 'immutability-helper';\nimport React from 'react';\nimport { FilterItem } from '../../filter-bar/FilterItem';\nimport { GraphqlVehicleSelectorItem } from '../GraphqlVehicleSelectorItem';\nimport { indexOf, isUndefined } from 'lodash';\n\nexport const VehicleMakeFilterItem: FilterItem<VehicleMakeFilterItemProps> = {\n  createInitialState: () => ({\n    searchQuery: '',\n    selectedOption: undefined,\n    disabled: false,\n  }),\n  createElement: (props) => React.createElement(MakeSelector, props),\n  onFilterItemUpdated: (filterBarState, updatedFilterItem, props) => {\n    const updatedItemIndex = indexOf(filterBarState, updatedFilterItem);\n    const currentItemIndex = indexOf(filterBarState, props);\n    const selectedOption = updatedFilterItem.selectedOption;\n\n    if (selectedOption && updatedItemIndex < currentItemIndex) {\n      switch (selectedOption.type) {\n        case 'YEAR':\n          return update(props, {\n            selectedYear: { $set: selectedOption as VehicleYearOption },\n            selectedOption: { $set: undefined },\n          });\n      }\n    }\n\n    return undefined;\n  },\n  updateFilterItemState: (filterBarState, props) => {\n    let disabled = false;\n    const currentItemIndex = indexOf(filterBarState, props);\n\n    if (currentItemIndex > 0) {\n      const previousFilterItem = filterBarState[currentItemIndex - 1];\n      disabled = disabled || isUndefined(previousFilterItem.selectedOption);\n    }\n\n    return update(props, {\n      disabled: { $set: disabled },\n    });\n  },\n};\n\nconst MakeSelector = GraphqlVehicleSelectorItem<VehicleMakeOption, VehicleMakeFilterItemProps>({\n  title: 'Make',\n  useClient: (props) => {\n    const { data } = useVehicleMakesSelector({\n      shouldSkip: props.disabled || false,\n      variables: {\n        uvdb_year_id: props.selectedYear?.id,\n        query: props.searchQuery,\n      },\n    });\n    if (data) {\n      return {\n        data: data.map((item) => ({\n          type: 'MAKE',\n          optionLabel: `${item.name}`,\n          ...item,\n        })),\n      };\n    }\n    return {\n      data: undefined,\n    };\n  },\n});\n\ninterface VehicleMakeFilterItemProps extends SearchableListProps<VehicleMakeOption> {\n  selectedYear?: VehicleYearOption;\n}\n\nexport type VehicleMakeOption = {\n  type: 'MAKE';\n  id: number;\n  name: string;\n  optionLabel: String;\n};\n","import { gql } from '@apollo/client';\nimport { IdentifiableModel } from '../../IdentifiableModel';\nimport { VehicleSelectorClient, unionById } from '../Client';\nimport { FRAGMENT_LEGACY_PAGINATION_CURSOR, FRAGMENT_UVDB_I18N } from './Fragments';\n\nexport interface GraphqlVehicleModelsVariable {\n  includeLocalization?: number;\n  uvdb_make_id: number;\n  uvdb_year_id?: number;\n  uvdb_year_min?: number;\n  uvdb_year_max?: number;\n  query?: string;\n  limit?: number;\n  page?: number;\n}\n\nexport interface UvdbModel extends IdentifiableModel<number> {\n  id: number;\n  name: string;\n}\n\nexport const VEHICLE_SELECTOR_MODELS = gql`\n  query VehicleSelectorModelOptions(\n    $includeLocalization: Boolean = false\n    $uvdb_make_id: Int!\n    $uvdb_year_id: Int\n    $uvdb_year_min: Int\n    $uvdb_year_max: Int\n    $query: String\n    $limit: Int\n    $page: Int\n  ) {\n    uvdb {\n      vehicle_selector {\n        uvdb_models(\n          uvdb_make_id: $uvdb_make_id\n          uvdb_year_id: $uvdb_year_id\n          uvdb_year_min: $uvdb_year_min\n          uvdb_year_max: $uvdb_year_max\n          q: $query\n          limit: $limit\n          page: $page\n        ) {\n          items {\n            id\n            name\n            i18n @include(if: $includeLocalization) {\n              ...uvdbI18n\n            }\n          }\n          cursor {\n            ...legacyPaginationCursor\n          }\n        }\n      }\n    }\n  }\n  ${FRAGMENT_LEGACY_PAGINATION_CURSOR}\n  ${FRAGMENT_UVDB_I18N}\n`;\n\ntype ResponseBody = {\n  uvdb: {\n    vehicle_selector: {\n      uvdb_models: {\n        items: UvdbModel[];\n      };\n    };\n  };\n}\n\nexport const useVehicleModelsSelector = VehicleSelectorClient<GraphqlVehicleModelsVariable | undefined, UvdbModel[]>({\n  query: VEHICLE_SELECTOR_MODELS,\n  parseResponse: (data: ResponseBody) => {\n    const items = data.uvdb.vehicle_selector.uvdb_models.items;\n    return unionById(items);\n  },\n});\n","import { useVehicleModelsSelector } from '../../../services/vehicle-selector/queries/VehicleModels';\n\nimport { SearchableListProps } from '../../common/SearchableList';\nimport { VehicleMakeOption } from './VehicleMake';\nimport { VehicleYearOption } from './VehicleYear';\nimport update from 'immutability-helper';\nimport React from 'react';\nimport { FilterItem } from '../../filter-bar/FilterItem';\nimport { GraphqlVehicleSelectorItem } from '../GraphqlVehicleSelectorItem';\nimport { indexOf, isUndefined } from 'lodash';\n\nexport const VehicleModelFilterItem: FilterItem<VehicleModelFilterItemProps> = {\n  createInitialState: () => ({\n    searchQuery: '',\n    selectedOption: undefined,\n    disabled: false,\n  }),\n  createElement: (props) => React.createElement(ModelSelector, props),\n  onFilterItemUpdated: (filterBarState, updatedFilterItem, props) => {\n    const updatedItemIndex = indexOf(filterBarState, updatedFilterItem);\n    const currentItemIndex = indexOf(filterBarState, props);\n    const selectedOption = updatedFilterItem.selectedOption;\n\n    if (selectedOption && updatedItemIndex < currentItemIndex) {\n      switch (selectedOption.type) {\n        case 'MAKE':\n          return update(props, {\n            selectedMake: { $set: selectedOption as VehicleMakeOption },\n            selectedOption: { $set: undefined },\n          });\n        case 'YEAR':\n          return update(props, {\n            selectedYear: { $set: selectedOption as VehicleYearOption },\n            selectedOption: { $set: undefined },\n          });\n      }\n    }\n\n    return undefined;\n  },\n  updateFilterItemState: (filterBarState, props) => {\n    let disabled = isUndefined(props.selectedMake);\n    const currentItemIndex = indexOf(filterBarState, props);\n\n    if (currentItemIndex > 0) {\n      const previousFilterItem = filterBarState[currentItemIndex - 1];\n      disabled = disabled || isUndefined(previousFilterItem.selectedOption);\n    }\n\n    return update(props, {\n      disabled: { $set: disabled },\n    });\n  },\n};\n\nconst ModelSelector = GraphqlVehicleSelectorItem<VehicleModelOption, VehicleModelFilterItemProps>({\n  title: 'Model',\n  useClient: ({ selectedMake, selectedYear, searchQuery, disabled }) => {\n    let queryVariable = undefined;\n    if (selectedMake) {\n      queryVariable = {\n        uvdb_year_id: selectedYear?.id,\n        uvdb_make_id: selectedMake.id,\n        query: searchQuery,\n      };\n    }\n\n    const { data } = useVehicleModelsSelector({\n      shouldSkip: disabled || isUndefined(queryVariable),\n      variables: queryVariable,\n    });\n    if (data) {\n      return {\n        data: data.map((item) => ({\n          type: 'MODEL',\n          optionLabel: `${item.name}`,\n          ...item,\n        })),\n      };\n    }\n    return {\n      data: undefined,\n    };\n  },\n});\n\ninterface VehicleModelFilterItemProps extends SearchableListProps<VehicleModelOption> {\n  selectedYear?: VehicleYearOption;\n  selectedMake?: VehicleMakeOption;\n}\n\nexport type VehicleModelOption = {\n  type: 'MODEL';\n  id: number;\n  name: string;\n  optionLabel: String;\n};\n","import React from 'react';\nimport './App.css';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport { Grid } from '@material-ui/core';\nimport { FilterBar } from './components/filter-bar/FilterBar';\nimport { VehicleYearFilterItem } from './components/vehicle-selector/items/VehicleYear';\nimport { VehicleMakeFilterItem } from './components/vehicle-selector/items/VehicleMake';\nimport { VehicleModelFilterItem } from './components/vehicle-selector/items/VehicleModel';\n\nfunction App() {\n  const client = new ApolloClient({\n    uri: 'https://api.parts-pal.com/node-api/graphql',\n    cache: new InMemoryCache(),\n  });\n\n  const onSelectFilterOptions = (selectedOptions: any[]) => {\n    if (selectedOptions) {\n      console.log(`You selected: ${JSON.stringify(selectedOptions)}`);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ApolloProvider client={client}>\n        <Grid container spacing={1} direction=\"column\" justify=\"center\">\n          <Grid item>\n            <FilterBar\n              filters={[VehicleYearFilterItem, VehicleMakeFilterItem, VehicleModelFilterItem]}\n              onSelectedAllFilterItems={(selectedOption) => onSelectFilterOptions(selectedOption)}\n            ></FilterBar>\n          </Grid>\n\n          <Grid item>\n            <FilterBar\n              filters={[VehicleMakeFilterItem, VehicleModelFilterItem, VehicleYearFilterItem]}\n              onSelectedAllFilterItems={(selectedOption) => onSelectFilterOptions(selectedOption)}\n            ></FilterBar>\n          </Grid>\n        </Grid>\n      </ApolloProvider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\nimport { CssBaseline } from '@material-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}